{"version":3,"sources":["SpaceX-Logo.svg.png","components/launches/Launch.js","components/launches/MissionKey.js","graphql_query/index.js","components/launches/index.js","components/LauncheDetails.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Launch","_ref","_ref$launch","launch","flight_number","mission_name","launch_year","launch_date_local","launch_success","rocket","react_default","a","createElement","Fragment","class","className","react_router_dom","to","concat","classNames","text-success","text-danger","dist_default","format","MissionKey","GET_LAUNCHES","gql","_templateObject","GET_LAUNCHE","_templateObject2","Launches","launches_MissionKey","react_apollo_esm","query","loading","error","data","scope","launches","map","launches_Launch","key","LauncheDetails","props","match","params","parseInt","variables","console","_data$launch","_data$launch$rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","height","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89006b51.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SpaceX-Logo.svg.950ba665.png\";","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport Moment from \"react-moment\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Launch = ({\r\n  launch: {\r\n    flight_number,\r\n    mission_name,\r\n    launch_year,\r\n    launch_date_local,\r\n    launch_success,\r\n    rocket\r\n  }\r\n}) => (\r\n  <>\r\n    <tr class=\"table-active\">\r\n      <td>{flight_number}</td>\r\n      <td>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-8\">{mission_name}</div>\r\n          <div className=\"col-md-4\">\r\n            <Link to={`/launche/${flight_number}`} className=\"btn btn-primary\">Launch Details</Link>\r\n          </div>\r\n        </div>\r\n      </td>\r\n      <td>{launch_year}</td>\r\n      <td>\r\n        <span\r\n          className={classNames({\r\n            \"text-success\": launch_success,\r\n            \"text-danger\": !launch_success\r\n          })}\r\n        >\r\n          {launch_success ? \"Success\" : \"Failed\"}\r\n        </span>\r\n      </td>\r\n      <td>\r\n        <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\r\n      </td>\r\n    </tr>\r\n  </>\r\n);\r\n\r\nexport default Launch;\r\n","import React from 'react'\r\n\r\nconst MissionKey = () => (\r\n    <div className=\"my-3\">\r\n       <p>\r\n           <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n       </p>\r\n\r\n       <p>\r\n            <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n       </p>\r\n    </div>\r\n);\r\n\r\nexport default MissionKey;","import { gql } from \"apollo-boost\";\r\n\r\nexport const GET_LAUNCHES = gql`\r\n  {\r\n    launches{\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_date_local\r\n      launch_success\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }`;\r\n\r\nexport const GET_LAUNCHE = gql`\r\n  query launch($flight_number: Int!){\r\n    launch(flight_number: $flight_number){\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_date_local\r\n      launch_success\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n}`\r\n","import React from \"react\";\r\nimport { Query } from \"react-apollo\";\r\n\r\n// Components\r\nimport Launch from \"./Launch\";\r\nimport MissionKey from './MissionKey';\r\n\r\n// Our QUERY\r\nimport { GET_LAUNCHES } from \"../../graphql_query\";\r\n\r\nconst Launches = () => {\r\n  return (\r\n    <>\r\n      <h1 className=\"display-4 my-3\">Lunches</h1>\r\n      <MissionKey />\r\n      <Query query={GET_LAUNCHES}>\r\n        {({ loading, error, data }) => {\r\n          if (loading) return <p>Loading...</p>;\r\n          if (error) return <p>Error :(</p>;\r\n          return (\r\n            <div className=\"card card-body mb-3\">\r\n              <table class=\"table table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\">flight number</th>\r\n                    <th scope=\"col\">mission name</th>\r\n                    <th scope=\"col\">launch year</th>\r\n                    <th scope=\"col\">launch success</th>\r\n                    <th scope=\"col\">launch date_local</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {data.launches.map(launch => (\r\n                    <Launch key={launch.flight_number} launch={launch} />\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          );\r\n        }}\r\n      </Query>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Launches;\r\n","import React from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport { GET_LAUNCHE } from \"../graphql_query\";\r\nimport { Link } from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\n\r\nconst LauncheDetails = props => {\r\n  let { flight_number } = props.match.params;\r\n  flight_number = parseInt(flight_number);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Query query={GET_LAUNCHE} variables={{ flight_number }}>\r\n        {({ error, loading, data }) => {\r\n          if (loading) return <p>Loading...</p>;\r\n          if (error) console.error(error);\r\n\r\n          const {\r\n            flight_number,\r\n            mission_name,\r\n            launch_year,\r\n            launch_success,\r\n            rocket: { rocket_id, rocket_name, rocket_type }\r\n          } = data.launch;\r\n\r\n          return (\r\n            <div>\r\n              <h1 className=\"display-4 my-3\">\r\n                <span className=\"text-dark\">Mission:</span> {mission_name}\r\n              </h1>\r\n\r\n              <h4 className=\"mb-3\">Launch Details</h4>\r\n\r\n              <ul className=\"list-group\">\r\n                <li className=\"list-group-item\">\r\n                  Flight number: {flight_number}\r\n                </li>\r\n                <li className=\"list-group-item\">Luanch year: {launch_year}</li>\r\n                <li className=\"list-group-item\">\r\n                  Launch successful:{\" \"}\r\n                  <span\r\n                    className={classNames({\r\n                      \"text-success\": launch_success,\r\n                      \"text-danger\": !launch_success\r\n                    })}\r\n                  >\r\n                    {launch_success ? \"YES\" : \"NO\"}\r\n                  </span>\r\n                </li>\r\n              </ul>\r\n\r\n              <h4 className=\"my-3\">Rocket Details</h4>\r\n\r\n              <ul className=\"list-group\">\r\n                <li className=\"list-group-item\">Rocket Id: {rocket_id}</li>\r\n                <li className=\"list-group-item\">Rocket name: {rocket_name}</li>\r\n                <li className=\"list-group-item\">rocket_type: {rocket_type}</li>\r\n              </ul>\r\n              <hr />\r\n              <Link to=\"/\" className=\"btn btn-primary\">Back</Link>\r\n            </div>\r\n          );\r\n        }}\r\n      </Query>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LauncheDetails;\r\n","import React from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport logo from \"./SpaceX-Logo.svg.png\";\nimport \"./bootstrap.min.css\";\n\n// Components\nimport Launches from \"./components/launches\";\nimport LauncheDetails from \"./components/LauncheDetails\";\n\n// set up our apollo client\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <Link to=\"/\">\n            <img\n              src={logo}\n              alt=\"spaceX\"\n              style={{ width: \"80vw\", height: \"100px\" }}\n            />\n          </Link>\n\n          <Route exact path=\"/\" component={Launches} />\n        </div>\n        <Route\n          exact\n          path=\"/launche/:flight_number\"\n          component={LauncheDetails}\n        />\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}